一、基础
１．实例 (参看todolist案例)
<div id="app">{{content}}</div>
var app = new Vue ({
    el:'#app',
    data: {
        content:hello world",
        list: []
    },
    setTimeout(function() {
        app.$data.content = 'good bye' //两秒以后数据改变
    }, 2000)
})
console.log();

２．生命周期钩子
    beforeCrete　基础初始化之后
    created     外部注册和双向绑定之后
    beforeMount　模板和数据结合之前页面渲染之前
    mounted     页面渲染之后
    bedoreUpdate　　当数据发生改变之前
    updated        当数据发生改变之后
    activated       keep-alive 组件激活时调用 该钩子在服务器端渲染期间不被调用
    deactivated     keep-alive 组件停用时调用 该钩子在服务器端渲染期间不被调用
    beforeDestroy   当调用destroy销毁之前
    destroyed       当调用destroy销毁之后
    errorCaptured   当捕获一个来自子孙组件的错误时被调用。
    此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。
    此钩子可以返回 false 以阻止该错误继续向上传播。


3.计算属性、方法和侦听器（computed\methods\watch）
    计算属性
    <p>Computed reversed message: "{{ reversedMessage }}"</p>
    computed: {
        reversedMessage: function () {
        return this.message.split('').reverse().join('')}
    
    计算属性中的ｓetter\getter
    computed:{
        fullname:{ 
            //计算属性调用 ,计算全名
            get:function(){
                return this.firstname + "" + this.lastname
            }，
            //当计算属性被设置后调用，例如全名被改变后，通过全名改变data里面的名和姓的值
            set:function(value){
                var arr= value.split('　'); //通过空格打散获取的字符串变成数组
                this.firstname=arr[0];
                this.lastname=arr[1];
            }}
    }


4.vue中的样式绑定
        方法１/意思是绑定一个class类　名字叫ac　是否显示取决于data里面isac的值
        <div @click='handleClassClick'　:class="{ac:isac}"></div>
        data:{isac:false}
        methods:{
            handleClassClick:function(){
                this.isac=!this.isac;
            }
        }
        方法２绑定变成数组意思是　绑定一个类显示的内容是ac变量的内容
        如下通过点击使得ac的值变成了bc　则class=bc类了
        <div @click='handleClassClick'　:class="[ac]"></div>  
        data:{ac:""}
        methods:{
            if(this.ac===bc){
                this.ac="";
            }else{
                handleClassClick:function(){
                        this.ac="bc";
            }}
            可换成三元表达式
            this.ac = this.ac === bc ? "": bc ;
        }
        方法３style

5.vue中的条件渲染
        v-if="show" ,v-show="show" 是否显示取决于show的值
        <div v-if="show">123</div>  
        <div v-else>111</div>  v-else必须和ｖ-if挨着写不然会报错
        <input key="user"">　给加入key值　虚拟dom被清空

6.vue中的列表喧嚷
        <todo-list   v-for="(item,index) in list" :key="index"></todo-list>
        循环细节key值唯一，一般为id
        数组里面加内容　不能直接下标加 得使用数组变异方法　例：
        vm.data.push()　pop(删除最后) shift（删除第一） unshift（增加第一） splic（截取） sort（排序） reverse（取反）
        <template></template>模板占位符　包裹元素　循环不显示

7.vue中的set方法　set 可以改变对象与列表的值
        Vue.set(vm.data里的对象或数组，"key","value");
        vm.$set(vm.data里的对象或数组，"key","value");


二组件
１组件中的细节
    ａ.is标签使用 例h5里面规范　表格里面tbady里面必须是tr 可我们组件化以后成了row容易出bug
    可以变成<tr is=row></tr> 及把组件赋<tr>

    b.子组件定义data必须　data:function(){return{}}
    
    c.ref（操作DOM）
    <div ref="hello" @click="handleClick">123</div>
    methods:{
        handleClick:function(){
            this.$ref.hello.interHTML; //通过名为hello的ref获取ＤＯM 的值１２３
        }
    }
    备注：如果是组件上使用ref　获取的是整个组件的引用


２父子组件数据传递
    父组件通过:count绑定向子组件传值，子组件通过props[]接收传递过来的数据
    子组件通过＠click等时间向上传值，父组件通过＠监听子组件的时间，然后通过方法接收
    例：子组件模板中
    <li @click='handleListClick'>　{{content}}　</li>
     methods:{
            handleListClick:function(){
                this.$emit('delete',this.index)
            },
        }
    父组件通过v-on:delete='handListDelete'接收　然后用函数使用
    子组件不要直接修改父组件传递过来的值（单向数据流）

３组件参数校验与非props特性
    非props 及子组件不接收父组件传递过来的值父组件会在html中暴露绑定值，子组件无法使用。
    props:{
        content{
            type:String,
            required:true,
            default:"默认值",
            validator:function(value){
                return (value.lenght>5);
        }} 
    }

４给组件绑定原生事件
    给组件绑定一个事件，实际上是监听了子组件的事件，需要通过子组件向上传递数据来触发
    要想使用组件绑定一个原生事件　需要　@click.native 加上事件修饰符即可

５非父子组件传值（vuex\bus总线）
    Vue.prototype.bus=new Vue()  在Vue类上挂上一个bus属性，指向同一个实例
    Vue.component(child,{
        data:function(){
            return selfcontent:this.content //为了单向流原则不改变传递过来的数据
        },
        props:{content:String},
        template:"<div @click=handclick>{{selfcontent}}</div>"
        methods{
            handclick:function(){
                this.bus,$emit('change',this.selfcontent)
            }
        }
        mouted:function(){
            var this_= this
            this.bus.$on('chang',function(msg){
                this_selfcontent=msg
            })
        }
    })

６vue中使用插槽
    子组件中有一部分内容是通过父组件ＤＯＭ显示　使用插槽
    例：父组件中的模板代码
        <b-content>
           <div slot="heart"></div>
           <h1 slot="footer"></h1>
        </b-content>
    子组件中的模板代码
        <div>
            <slot name=heart>默认值</slot>
            <slot name=footer></slot>
        </div>

７vue中的作用域插槽
父组件中的模板代码
<todo-list v-bind:todos="todos">
    <!-- 将 `slotProps` 定义为插槽作用域的名字 -->
    <template slot-scope="slotProps">
        <!-- 为待办项自定义一个模板，-->
        <!-- 通过 `slotProps` 定制每个待办项。-->
        <span v-if="slotProps.todo.isComplete">✓</span>
        {{ slotProps.todo.text }}
    </template>
</todo-list>
    子组件中的模板代码
    <ul>
        <li v-for="todo in todos"  v-bind:key="todo.id">
            <!-- 我们为每个 todo 准备了一个插槽，-->
            <!-- 将 `todo` 对象作为一个插槽的 prop 传入。-->
            <slot v-bind:todo="todo">
                <!-- 回退的内容 -->
                {{ todo.text }}
            </slot>
        </li>
    </ul>

    如上　父组件用slotProps　接收插槽　绑定时间todo　使用时 slotProps.todo
８动态组件与v-once
　　　例：如有两个组件　child-one child-two
     <compont :is="type"><component>
     <button　＠click="butt"></button>
      var wm= new Vue({
          el:,
          data:{type:child-one},
          methods{
              butt:function(){
                  this.type= this.type==='child-one'? 'child-two':'child-one'
              }
          }
      })
v-once指令被放入内存，在动态组件中不会被重建，提高展示效率


三vue动画
１．css动画（Animate.css）
    过渡动画原理　首先得被<transition name="faca"></transition>包裹，有name　前为name  没name为ｖ
    显示原理
    fade-enter(动画开始第一帧) fada-enter-active（动画时间）  fade-enter-to（第二帧到动画结束）
    离开原理
    v-leave (动画结束第一帧)　　v-leave－active（动画时间）　v-leave-to（第二帧到动画结束）

    .v-enter .v-leave-to{opactity:0;}
    .v-enter-active .v-leave-active{transition:opactity 3s} 进去和离开时间
    
    Animate动画　首先引入animate.css 然后必须使用自定义名字　例
    <transition name="face" enter-active-class="animate swing" leave-active-class="animate swing">
    这样相当于重新定义了入场和出厂的css类名

    页面第一次加载时　显示动画
    <transition name="face"
        appear  //第一次显示的时候引入动画效果
        enter-active-class="animate swing" 
        leave-active-class="animate swing"
        appear-active-class="animate swing">　//引入的第一次动画效果是什么
    </transition》


    Animate是keyframes的动画效果，transition是过度效果　一起使用如下
    <style>
         .v-enter .v-leave-to{opactity:0;}
         .v-enter-active .v-leave-active{transition:opactity 3s} 
    </style>
    <transition
        type="transition" //确定过渡动画时长为准　或者如下
        ：duration="{enter:1000,leave:1000}" 手动设置入场和出厂的时间
        ：duration="1000" 设置自定义时间
        appear 
        enter-active-class="animate swing　v-enter-active" 
        leave-active-class="animate swing  v-leave－active"
        appear-active-class="animate swing">　//引入的第一次动画效果是什么
    </transition>



２．js动画(VeLocity.js)
    原理　动画钩子
    @befor-enter(进入前) @enter（进入） 　@after-enter （进入后） 　入场动画钩子
    @befor-leave 　@leave   @after-leave

     <transition
       @befor-enter="hand1"
       @enter="hand2"
       @after-enter="hand3"
    </transition>
        methods:{
            hand1:function(el){el.style.opacity=0;},
            hand2:function(el,done){
            },
            hand3:function(el)
        }

    VeLocity 动画库的使用

    <transition
       @befor-enter="hand1"
       @enter="hand2"
       @after-enter="hand3"
    </transition>
        
    methods:{
        hand1:function(el){el.style.opacity=0;},
        hand2:function(el,done){
            Velocity(el,{opacity=1},{duration:1000, complete:done})
            },
        hand3:function(el)
        }

    多个元素和组件过度
    多个元素过度动画
    <transition mode="in-out"> 先进入后隐藏，out-in先隐藏后进　动画效果
        <div v-if="show" key="hello">hello</div> 设置key值解决DOM复用问题，否则动画不显示
        <div v-else key="bye"></div>
    </transition>
　　
    多组件过度可以按照上面进行，也可以按照　动态组件模式（参考动态组件）
    <transitiong-group></transition-group> 意思为在每个上增加transition
    
    vue中的动画封装
    
四实战案例
１．环境搭建
２．git使用
３．数据模拟
４．本地开发
５．联调
６．真机测试
７．上线

五插件
1.vue route
2.vuex
3.stylus
4.Axios
5.异步组件
6.递归组件
7.公用组件
8.插件